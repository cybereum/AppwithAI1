@page
@model AppwithAI1.Pages.Dash_Test6Model
@{
}
<meta name="robots" content="noindex, nofollow">
<meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1.0">



<!-- Web fonts -->
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Raleway:200,300,400,600,700&Open+Sans:300,400,600,700">

<!-- Bootstrap and CSS -->
<link rel="stylesheet" href="css/bootstrap.min.css">
<link rel="stylesheet" href="css/animate.min.css">
<link rel="stylesheet" href="css/style.css">

<!-- Include the AnyChart library and the custom CSS file -->
<script src="https://cdn.anychart.com/releases/v8/js/anychart-base.min.js"></script>
<script src="https://cdn.anychart.com/releases/v8/js/anychart-ui.min.js"></script>
<script src="https://cdn.anychart.com/releases/v8/js/anychart-exports.min.js"></script>
<script src="https://cdn.anychart.com/releases/v8/js/anychart-gantt.min.js"></script>
<script src="https://cdn.anychart.com/releases/v8/js/anychart-data-adapter.min.js"></script>


<!-- Include the Materialize CSS library -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>


<script src="https://d3js.org/d3.v5.min.js"></script>

<div id="page-container">
    <!-- Header -->
    <header id="page-header">
        <div class="h3 text-right pull-right hidden-xs">
            <div class="text-crystal font-w300">USER_LOGGED_IN</div>
        </div>
        <h1 class="h3 font-w200">
            <span class="text-crystal">//</span> <a class="link-sf font-w300" href="index.html">PROJECT_DASHBOARD</a>
        </h1>
        <div class="logo-container"><img src="https://cybereum.io/wp-content/uploads/2018/08/cropped-cropped-cropped-top-logo-2-4-300x300.png" alt="cybereum" width="100" height="100"></div>

    </header>
    <!-- END Header -->
    <!-- Main Content -->
 
        <!-- Columns -->
 
        <!-- File input element -->



            <h2 class="text-white-op font-weight-bold">GANTT Chart</h2>

            <div class="block">
                <div class="block-header overflow-hidden">
                    <h2 class="block-title visibility-hidden" data-toggle="appear" data-class="animated fadeInDown">MILESTONES</h2>
                </div>
                <div class="block-content block-content-full overflow-hidden">

                    <!-- Add a file input element to your HTML page -->
                    <input type="file" id="file-input">
            
                <table class="dashboard-table">
                    <thead>
             
                        
                    </thead>
                    <tbody id="activities"></tbody>
                </table>
            



            <!-- Use the FileReader API to read the contents of the selected file -->

                    <script>
                    // Set up the connection configuration
                    const hostname = "gremtest1.gremlin.cosmosdb.azure.com";
                    const port = 443;
                    const authKey = "lja6Gkeuf5nsnEg9TYyC79N1fvt4v1ZBb9JwkbWPNiNC1tEeBOSVu8vBHQZeKnSFguIKz9ziKjVEiPAjRAuf3w==";
                    const database = "graphdb";
                    const collection = "Graph8";
                    const gremlinEndpoint = `wss://${hostname}:${port}/gremlin`;
                    const authenticator = new Gremlin.Net.Driver.Authentication.PlainTextSaslAuthenticator("/dbs/" + database + "/colls/" + collection, authKey);

                    // Set up the Gremlin client
                    const gremlinClient = new Gremlin.Net.Driver.GremlinClient(gremlinEndpoint, {
                        authenticator,
                        traversalsource: "g",
                        rejectUnauthorized: true,
                        mimeType: "application/vnd.gremlin-v2.0+json"
                    });

                    // Define the Gremlin query to retrieve the data from the database
                    const gremlinQuery = "g.V().hasLabel('activity').project('id', 'name', 'start', 'end', 'predecessors', 'successors').by('id').by('name').by('start').by('end').by('predecessors').by('successors')";

                    // Use the Gremlin client to execute the query and get the data
                    const data = await gremlinClient.submit(gremlinQuery).then(result => {
                        return result._items.map(item => {
                            return {
                                id: item.id,
                                name: item.name,
                                start: item.start,
                                end: item.end,
                                predecessors: item.predecessors,
                                successors: item.successors
                            };
                        });
                    });
                            const row = `
                              <tr class="title-row">
                                <th contentEditable="true">Id</th>
                                <th contentEditable="true">Activity</th>
                                <th contentEditable="true">Start Date</th>
                                <th contentEditable="true">End Date</th>
                                <th contentEditable="true">Predecessors</th>
                                <th contentEditable="true">Successors</th>
                                <th style="width: 600px">Progress</th>
                              </tr>
                            `;
                            document.querySelector("#activities").innerHTML += row;   

                            // Set the start and end dates for the x-axis
                            const startDate = d3.min(data, d => new Date(d.start));
                            const endDate = d3.max(data, d => new Date(d.end));

                            // Set the dimensions of the chart
                            var width = 600;
                            var height = 50;
                            var margin = { top: 20, right: 20, bottom: 20, left: 400 };
                            
                            // Create a time scale to map the duration of each activity to a length in pixels
                            xScale = d3.scaleTime().domain([startDate, endDate]).range([0, width]);
                            // Set the length of each progress bar to be proportional to its duration

                            const xAxis = d3.axisBottom(xScale).ticks(d3.timeDay.every(1)).tickFormat(d3.timeFormat("%m/%d/%Y")); 
                            const xAxisElement = d3.select("#x-axis").call(xAxis);
                            //This will create tick marks for every day and label them with the date in the format MM/DD/YYYY. You can adjust the tick interval and formatting as needed.

                            // Create the SVG element and append it to the #gantt-chart div
                            var svg = d3.select("#gantt-chart")
                                .append("svg")
                                .attr("width", width + margin.left + margin.right)
                                .attr("height", height + margin.top + margin.bottom)
                                .append("g")
                                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
                            // Add the x-axis to the chart
                            svg.append("g")
                                .attr("transform", "translate(0," + height + ")")
                                .call(d3.axisBottom(xScale));
                            
                                // Use the data to update the progress bars
                                data.forEach(activity => {
                                    const startDate = new Date(activity.start);
                                    const endDate = new Date(activity.end);
                                    const currentDate = new Date();  // use actual current date
                                    let completionPercentage;
                                    if (currentDate < startDate) {
                                        completionPercentage = 0;
                                    } else if (currentDate > endDate) {
                                        completionPercentage = 100;
                                    } else {
                                        const totalTime = endDate - startDate;
                                        const elapsedTime = currentDate - startDate;
                                        completionPercentage = (elapsedTime / totalTime) * 100;
                                    }
                                    const startPos = xScale(new Date(activity.start));
                                    const endPos = xScale(new Date(activity.end));
                                    const barLength1 = endPos - startPos;
                                    const barLength = 200;
                                    // Set the width of the progress bar element
                                    //d3.select(`#pb-${activity.id}`).style("width", `${barLength}px`);

                                    //offset each progress bar to start at its start date, you will need to use the xScale to calculate the position of the start date and set it as the left margin of the progress bar element.
                                    // Set the left margin of the progress bar element
                                    //d3.select(`#pb-${activity.id}`).style("margin-left", `${startPos}px`);
                                    
                                    const progressBar = `
                                        <div id="pb-${activity.id}" class="font-w600 text-white-op push-5 visibility-hidden" data-toggle="appear" data-class="animated fadeInRight" data-timeout="100">${activity.name}: ${completionPercentage}%</div>
                                        <div id="pb-${activity.id}" class="progress visibility-hidden" data-toggle="appear" data-class="animated fadeInLeft" data-timeout="100" style="left: ${startPos}px; width: ${barLength1}px">
                                        <div class="progress-bar progress-bar-sf progress-bar-striped active" role="progressbar" aria-valuenow="${completionPercentage}" aria-valuemin="0" aria-valuemax="100" style="width: ${completionPercentage}%"></div>
                                        </div>
                                `;
                            const row = `
                              <tr>
                                <td contentEditable="true">${activity.id}</td>
                                <td contentEditable="true">${activity.name}</td>
                                <td contentEditable="true">${activity.start}</td>
                                <td contentEditable="true">${activity.end}</td>
                                <td contentEditable="true">${activity.predecessors.join(", ")}</td>
                                <td contentEditable="true">${activity.successors.join(", ")}</td>
                                <td style="width: 600px" data-progress-bar="${activity.id}">${progressBar}</td>
                              </tr>
                            `;
                            document.querySelector("#activities").innerHTML += row;



                               
                        });
                        activity.predecessors.forEach(predecessorId => {
                            const predecessorProgressBar = document.querySelector(`#pb-${predecessorId}`);
                            predecessorProgressBar.style.marginLeft = "20px";
                        });


                        // Add lines connecting progress bars of predecessor activities
                        data.forEach(activity => {
                            const predecessorIds = activity.predecessors;
                            predecessorIds.forEach(predecessorId => {
                                // Get the predecessor progress bar element
                                const predecessorProgressBar = document.querySelector(`#pb-${predecessorId}`);
                                // Get the current progress bar element
                                const currentProgressBar = document.querySelector(`#pb-${activity.id}`);
                                // Create the line element
                                const line = document.createElement("div");
                                line.style.height = "2px";
                                line.style.width = "100%";
                                line.style.backgroundColor = "black";
                                line.style.position = "absolute";
                                line.style.top = "50%";
                                // Append the line element to the predecessor progress bar element
                                predecessorProgressBar.appendChild(line);
                            });
                        });

                      }
                        });
                    </script>

            <div id="gantt-chart"></div>

                    
            <!-- Add an update button to update the JSON file with the new data from the table -->
            <button id="update-button">Update</button>

                    <script>




                        // Add a click event listener to the update button
                        document.querySelector("#update-button").addEventListener("click", () => {
                            // Read the contents of the file into a JavaScript object
                            const reader = new FileReader();
                            reader.onload = () => {
                                const data = JSON.parse(reader.result);

                                // Update the data object with the new data from the table
                                const table = document.querySelector("table");
                                for (let i = 1; i < table.rows.length; i++) {
                                    const row = table.rows[i];
                                    const id = row.cells[0].textContent;
                                    const activity = data.find(a => a.id === id);
                                    if (activity) {
                                        activity.name = row.cells[1].textContent;
                                        activity.start = row.cells[2].textContent;
                                        activity.end = row.cells[3].textContent;
                                        activity.predecessors = row.cells[4].textContent.split(", ");
                                        activity.successors = row.cells[5].textContent.split(", ");
                                    }
                                }

                                // Write the updated data object to the file
                                const file = fileInput.files[0];
                                const writer = new FileWriter();
                                writer.onwriteend = () => {
                                    console.log("Data updated successfully");
                                }
                                writer.onerror = () => {
                                    console.log("An error occurred while updating the data");
                                }
                                writer.write(JSON.stringify(data));
                            }
                            reader.readAsText(file);
                        });

                    </script>

                 <form id="add-activity-form">
                  <label for="activity-name">Activity Name:</label>
                  <input type="text" id="activity-name" required>
                  <br>
                  <label for="activity-start">Start Date:</label>
                  <input type="date" id="activity-start" required>
                  <br>
                  <label for="activity-end">End Date:</label>
                  <input type="date" id="activity-end" required>
                  <br>
                  <label for="activity-predecessors">Predecessors:</label>
                  <input type="text" id="activity-predecessors">
                  <br>
                  <label for="activity-successors">Successors:</label>
                  <input type="text" id="activity-successors">
                </form>

            <button type="button" id="add-activity-button">Add Activity</button>



            <script>
                const addActivityButton = document.querySelector("#add-activity-button");
                addActivityButton.addEventListener("click", () => {
                    // Get the data from the form input elements
                    const name = document.querySelector("#activity-name").value;
                    const start = document.querySelector("#activity-start").value;
                    const end = document.querySelector("#activity-end").value;
                    const predecessors = document.querySelector("#activity-predecessors").value.split(", ");
                    const successors = document.querySelector("#activity-successors").value.split(", ");

                    // Create a new activity object
                    const activity = {
                        id: 301,  // assign a unique id to the new activity
                        name: name,
                        start: start,
                        end: end,
                        predecessors: predecessors,
                        successors: successors
                    };

                    // Add the new activity to the data array
                    // data.push(activity);
                    // Use the data to update the progress bars
                    const startDate = new Date(activity.start);
                    const endDate = new Date(activity.end);
                    const currentDate = new Date();  // use actual current date
                    let completionPercentage;
                    if (currentDate < startDate) {
                        completionPercentage = 0;
                    } else if (currentDate > endDate) {
                        completionPercentage = 100;
                    } else {
                        const totalTime = endDate - startDate;
                        const elapsedTime = currentDate - startDate;
                        completionPercentage = (elapsedTime / totalTime) * 100;
                    }
                    const progressBar = `
                    <div class="font-w600 text-white-op push-5 visibility-hidden" data-toggle="appear" data-class="animated fadeInRight" data-timeout="100">${activity.name}: ${completionPercentage}%</div>
                    <div class="progress visibility-hidden" data-toggle="appear" data-class="animated fadeInLeft" data-timeout="100">
                      <div class="progress-bar progress-bar-sf progress-bar-striped active" role="progressbar" aria-valuenow="${completionPercentage}" aria-valuemin="0" aria-valuemax="100" style="width: ${completionPercentage}%"></div>
                    </div>
                  `;
                    // Add the new activity to the table
                    const tableBody = document.querySelector("#activities");
                    const row = document.createElement("tr");
                    row.innerHTML = `
                      <td>${activity.id}</td>
                      <td>${activity.name}</td>
                      <td>${activity.start}</td>
                      <td>${activity.end}</td>
                      <td>${activity.predecessors.join(", ")}</td>
                      <td>${activity.successors.join(", ")}</td>
                      <td style="width: 600px">${progressBar}</td>
                    `;
                    tableBody.appendChild(row);


                });

                // Add the update button event listener
                const updateButton = document.querySelector("#update-button");
                updateButton.addEventListener("click", () => {
                    // Read the contents of the file into a JavaScript object
                    const reader = new FileReader();
                    reader.onload = () => {
                        const data = JSON.parse(reader.result);

                        // Update the data object with the new data from the table
                        const table = document.querySelector("table");
                        for (let i = 1; i < table.rows.length; i++) {
                            const row = table.rows[i];
                            const id = row.cells[0].textContent;
                            const activity = data.find(a => a.id === id);
                            if (activity) {
                                activity.name = row.cells[1].textContent;
                                activity.start = row.cells[2].textContent;
                                activity.end = row.cells[3].textContent;
                                activity.predecessors = row.cells[4].textContent.split(", ");
                                activity.successors = row.cells[5].textContent.split(", ");
                            }
                        }

                        // Write the updated data object to the file
                        const file = fileInput.files[0];
                        const fileWriter = new FileWriter();
                        fileWriter.onwrite = () => {
                            console.log("Data written to file.");
                        };
                        fileWriter.onerror = () => {
                            console.error("Error writing data to file.");
                        };
                        fileWriter.writeText(JSON.stringify(data));
                    };
                    reader.readAsText(file);
                });



            </script>

            <style>
                .task-row {
                    display: table;
                    width: 100%;
                    border-bottom: 1px solid white; /* Add a border at the bottom of each row */
                }

                    .task-row > div {
                        display: table-cell;
                        vertical-align: top;
                    }
            </style>



            <style>
                .bar {
                    fill: #d2fcff;
                }

                .tick text {
                    fill: white;
                }
            </style>
            <script>
                // Set the dimensions of the chart
                var width = 1000;
                var height = 500;
                var margin = { top: 20, right: 20, bottom: 20, left: 20 };

                // Define the scales for the x-axis (time scale) and y-axis (band scale)
                var xScale = d3.scaleTime()
                    .domain([d3.min(data, d => d3.timeParse("%Y-%m-%d")(d.start)), d3.max(data, d => d3.timeParse("%Y-%m-%d")(d.end))])
                    .range([0, width]);
                var yScale = d3.scaleBand()
                    .domain(data.map(d => d.task))
                    .range([0, height]);

                // Create the SVG element and append it to the #gantt-chart div
                var svg = d3.select("#gantt-chart")
                    .append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                // Add the x-axis to the chart
                svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(xScale));

                // Add the y-axis to the chart
                svg.append("g")
                    .call(d3.axisLeft(yScale));

                // Add the bars representing the tasks to the chart
                svg.selectAll(".bar")
                    .data(data)
                    .enter()
                    .append("rect")
                    .attr("class", "bar")
                    .attr("x", d => xScale(d3.timeParse("%Y-%m-%d")(d.start)))
                    .attr("y", d => yScale(d.task))
                    .attr("width", d => xScale(d3.timeParse("%Y-%m-%d")(d.end)) - xScale(d3.timeParse("%Y-%m-%d")(d.start)))
                    .attr("height", yScale.bandwidth())
                    .style("fill", "white")
                    .on("mouseover", function (d) {
                        // Show the tooltip when the user hovers over a bar
                        d3.select("#tooltip")
                            .style("left", (d3.event.pageX + 10) + "px")
                            .style("top", (d3.event.pageY - 25) + "px")
                            .style("opacity", 1);
                        d3.select("#task").text(d.task);
                        d3.select("#start").text(d.start);
                        d3.select("#end").text(d.end);
                    })
                    .on("mouseout", function (d) {
                        // Hide the tooltip when the user stops hovering over a bar
                        d3.select("#tooltip")
                            .style("opacity", 0);
                    });


                // Add an event listener to update the chart when the slider is moved
                document.getElementById("flex-slider").addEventListener("input", updateChart);

                // Add a title row to the task list table
                var titleRow = d3.select("#task-rows")
                    .append("div")
                    .attr("class", "task-row table dashboard-table");

                titleRow.append("div")
                    .attr("class", "task-name")
                    .text("Task");
                titleRow.append("div")
                    .attr("class", "task-start")
                    .text("Start");
                titleRow.append("div")
                    .attr("class", "task-end")
                    .text("End");

                // Add a list of the tasks to the #task-list div
                var taskRows = d3.select("#task-rows")
                    .selectAll("div")
                    .data(data)
                    .enter()
                    .append("div")
                    .attr("class", "task-row table dashboard-table")

                taskRows.append("div")
                    .attr("class", "task-name")
                    .append("div")
                    .text(d => d.task);
                taskRows.append("div")
                    .attr("class", "task-start")
                    .append("div")
                    .text(d => d.start);
                taskRows.append("div")
                    .attr("class", "task-end")
                    .append("div")
                    .text(d => d.end);
            </script>


            <div id="gantt-chart"></div>
                </div>

            </div>

      
</div>