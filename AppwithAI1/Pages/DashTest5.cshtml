@page "/DashTest5"
@using Gremlin.Net.Process.Traversal
@using Gremlin.Net.Driver
@using Gremlin.Net.Structure.IO.GraphSON
@using System.Web
@using Microsoft.JSInterop
@using Newtonsoft.Json
@using System.IO
@model AppwithAI1.Pages.DashTest5Model
@inject IJSRuntime JSRuntime

<html>
<head>
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <style>
        .node {
            fill: #fff;
            stroke: steelblue;
            stroke-width: 1.5px;
        }

        .link {
            stroke: #d2fbff;
            stroke-opacity: 0.9;
        }
    </style>
</head>
<body>
    <button id="loadGraphBtn">Load Graph</button>
    <svg id="graphSvg"></svg>
    <button id="generateRectangles">Generate Rectangles</button>
    <div id="d3-example"></div>
    <script>
        async function generateGraph() {
            var graphData = await DotNet.invokeMethodAsync("AppwithAI1", "GetGraphData");
            var nodes = graphData.nodes;
            var links = graphData.links;
            var maxDegree = d3.max(links, function (d) { return d.value; });
            var minRadius = 5;
            var maxRadius = 30;
            var radiusScale = d3.scaleLinear()
                .domain([1, maxDegree])
                .range([minRadius, maxRadius]);
            var svg = d3.select("body")
                .append("svg")
                .attr("width", 500)
                .attr("height", 500);

            var simulation = d3.forceSimulation()
                .force("link", d3.forceLink().id(function (d) { return d.id; }))
                .force("charge", d3.forceManyBody())
                .force("center", d3.forceCenter(250, 250));
            var link = svg.append("g")
                .attr("class", "links")
                .selectAll("line")
                .data(links)
                .enter()
                .append("line")
                .attr("stroke-width", function (d) { return Math.sqrt(d.value); });

            var node = svg.append("g")
                .attr("class", "nodes")
                .selectAll("circle")
                .data(nodes)
                .enter()
                .append("circle")
                .attr("r", function (d) { return radiusScale(1); })
                .attr("fill", "steelblue")
                .attr("stroke", "white")
                .attr("stroke-width", 1)
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended));

            var label = svg.selectAll(null)
                .data(nodes)
                .enter()
                .append("text")
                .attr("dy", ".35em")
                .attr("text-anchor", "middle")
                .attr("font-size", "8px")
                .text(function (d) { return d.name; });
            node.append("title")
                .text(function (d) { return d.name; });

            simulation
                .nodes(nodes)
                .on("tick", ticked);

            simulation.force("link")
                .links(links);

            function ticked() {
                link
                    .attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });

                node
                    .attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });

                label
                    .attr("x", function (d) { return d.x; })
                    .attr("y", function (d) { return d.y + 6; });
            }

            function dragstarted(d) {
                if (!d3.event.active) simulation.alphaTarget(0.3).restart();
                d.fx = d.x;
                d.fy = d.y;
            }

            function dragged(d) {
                d.fx = d3.event.x;
                d.fy = d3.event.y;
            }

            function dragended(d) {
                if (!d3.event.active) simulation.alphaTarget(0);
                d.fx = null;
                d.fy = null;
            }
        }

        document.getElementById("loadGraphBtn").addEventListener("click", function () {
            generateGraph();
        });

        function generateRectangles() {
            var dataset = [80, 100, 56, 120, 180, 30, 40, 120, 160];
            d3.select("#d3-example")
                .selectAll("div")
                .data(dataset)
                .enter()
                .append("div")
                .attr("class", "bar")
                .style("height", function (d) {
                    var barHeight = d * 5;
                    return barHeight + "px";
                });
        }

        document.getElementById("generateRectangles").addEventListener("click", function () {
            generateRectangles();
        });
    </script>
</body>
</html>


