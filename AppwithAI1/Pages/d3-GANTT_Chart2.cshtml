@page
@model AppwithAI1.Pages.d3_GANTT_Chart2Model
@{
    ViewData["Title"] = "d3_GANTT_Chart2";
}

<style>
  .task-row {
    display: table;
    width: 100%;
        border-bottom: 1px solid white; /* Add a border at the bottom of each row */
  }
  .task-row > div {
    display: table-cell;
    vertical-align: top;
  }
</style>

<style>
    .bar {
        fill: #d2fcff;
    }

    .tick text {
        fill: white;
    }
</style>

<h1>GANTT Chart using d3.js</h1>
<div id="gantt-chart"></div>

<!-- Add tooltip element -->
<div id="tooltip" class="hidden">
  <p><strong>Task:</strong> <span id="task"></span></p>
  <p><strong>Start:</strong> <span id="start"></span></p>
  <p><strong>End:</strong> <span id="end"></span></p>
</div>

<!-- Add div to display task list -->
<div id="task-list-container">
    <h2>Task List</h2>
    <div id="task-list">
        <!-- Add rows for each task -->
        <div id="task-rows"></div>
    </div>
</div>

<!-- Add form for uploading XML file -->
<form id="upload-form" method="post" enctype="multipart/form-data">
  <label for="upload-file">Choose a file to upload:</label>
  <input type="file" id="upload-file" name="upload-file" accept=".xml">
  <input type="submit" value="Upload">
</form>

@section Scripts {
<script src="https://d3js.org/d3.v5.min.js"></script>

<script>
        // Add an event listener for the form submission event
        document.getElementById("upload-form").addEventListener("submit", function (event) {
            // Prevent the form from submitting
            event.preventDefault();

            // Get the file input element
            var fileInput = document.getElementById("upload-file");

            // Check if a file has been selected
            if (fileInput.files.length > 0) {
                // Get the selected file
                var file = fileInput.files[0];

                // Create a new FileReader to read the file
                var reader = new FileReader();

                // Set the event handler for the load event
                reader.onload = function (event) {
                    // Get the contents of the file
                    var contents = event.target.result;

                    // Parse the XML contents
                    var xml = d3.xml(contents, function (error, xml) {
                        if (error) throw error;

                        // Extract the data from the XML file and store it in a variable
                        var data = [];

                        // Loop through the tasks in the XML file and extract the data
                        xml.querySelectorAll("Task").forEach(function (taskElement) {
                            var task = {};
                            task.task = taskElement.querySelector("Name").textContent;
                            task.start = taskElement.querySelector("Start").textContent;
                            task.end = taskElement.querySelector("Finish").textContent;
                            data.push(task);
                        });

                        // Update the chart with the new data
                        updateChart(data);
                    });
                };

                // Read the file
                reader.readAsText(file);
                // Display a dialog box indicating that the file was uploaded successfully
                alert("File uploaded successfully!");
            }
        });
</script>

<script>
  // Set the dimensions of the chart
  var width = 1000;
  var height = 500;
  var margin = { top: 20, right: 20, bottom: 20, left: 20 };

  // Define the scales for the chart axes
  var xScale = d3.scaleTime()
    .range([0, width - margin.left - margin.right]);

  var yScale = d3.scaleBand()
    .range([0, height - margin.top - margin.bottom])
    .padding(0.1);
      // Define the axes for the chart
  var xAxis = d3.axisBottom(xScale)
    .ticks(d3.timeDay.every(1));

  var yAxis = d3.axisLeft(yScale)
    .tickSize(0);

  // Define the svg element for the chart
  var svg = d3.select("#gantt-chart")
    .append("svg")
    .attr("width", width)
    .attr("height", height)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  // Define the tooltip element
  var tooltip = d3.select("#tooltip");

  // Define the bar element for the chart
  var bar = svg.selectAll(".bar")
    .data(data)
    .enter().append("rect")
    .attr("class", "bar")
    .attr("x", function(d) { return xScale(new Date(d.start)); })
    .attr("y", function(d) { return yScale(d.task); })
    .attr("height", yScale.bandwidth())
    .attr("width", function(d) { return xScale(new Date(d.end)) - xScale(new Date(d.start)); })
    .on("mouseover", function(d) {
      tooltip.style("display", "block")
        .style("left", d3.event.pageX + 10 + "px")
        .style("top", d3.event.pageY - 25 + "px")
        .style("opacity", 0.9);
      d3.select("#task").text(d.task);
      d3.select("#start").text(d.start);
      d3.select("#end").text(d.end);
    })
    .on("mouseout", function() {
      tooltip.style("display", "none");
    });

  // Add the x-axis to the chart
  svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + (height - margin.top - margin.bottom) + ")")
    .call(xAxis);

  // Add the y-axis to the chart
  svg.append("g")
    .attr("class", "y axis")

      // Function to update the chart with new data
  function updateChart(newData) {
    // Update the scales based on the new data
    xScale.domain([d3.min(newData, function(d) { return new Date(d.start); }), d3.max(newData, function(d) { return new Date(d.end); })]);
    yScale.domain(newData.map(function(d) { return d.task; }));

    // Update the bar elements with the new data
    var bar = svg.selectAll(".bar")
      .data(newData);

    bar.exit().remove();

    bar.enter().append("rect")
      .attr("class", "bar")
      .merge(bar)
      .attr("x", function(d) { return xScale(new Date(d.start)); })
      .attr("y", function(d) { return yScale(d.task); })
      .attr("height", yScale.bandwidth())
      .attr("width", function(d) { return xScale(new Date(d.end)) - xScale(new Date(d.start)); })
      .on("mouseover", function(d) {
        tooltip.style("display", "block")
          .style("left", d3.event.pageX + 10 + "px")
          .style("top", d3.event.pageY - 25 + "px")
          .style("opacity", 0.9);
        d3.select("#task").text(d.task);
        d3.select("#start").text(d.start);
        d3.select("#end").text(d.end);
      })
      .on("mouseout", function() {
        tooltip.style("display", "none");
      });

    // Update the x-axis with the new scale
    svg.select(".x.axis")
      .call(xAxis);

    // Update the y-axis with the new scale
    svg.select(".y.axis")
      .call(yAxis);
  }

  // Function to update the task list with new data
   function updateTaskList(newData) {
    // Remove any existing task rows
    d3.select("#task-rows").selectAll("div").remove();

    // Add a row for each task
    var taskRows = d3.select("#task-rows").selectAll("div")
      .data(newData)
      .enter().append("div")
      .attr("class", "task-row")

    // Add a div for each piece of task data
    taskRows.append("div")
      .text(function(d) { return d.task; });
    taskRows.append("div")
      .text(function(d) { return d.start; });
    taskRows.append("div")
      .text(function(d) { return d.end; });
  }

    // Add event listeners for the file input and upload button
  d3.select("#file-input").on("change", function() {
    var file = d3.event.target.files[0];
    if (file) {
      var reader = new FileReader();
      reader.onload = function(e) {
        var contents = e.target.result;
        parseXML(contents);
      };
      reader.readAsText(file);
    }
  });
  d3.select("#upload-button").on("click", function() {
    d3.event.preventDefault();
    var file = d3.select("#file-input").node().files[0];
    if (file) {
      var reader = new FileReader();
      reader.onload = function(e) {
        var contents = e.target.result;
        parseXML(contents);
      };
      reader.readAsText(file);
    }
  });

  // Function to parse the XML data and update the chart and task list
  function parseXML(xml) {
    var xmlDoc = new DOMParser().parseFromString(xml, "text/xml");
    var tasks = xmlDoc.getElementsByTagName("Task");
    var data = [];
    for (var i = 0; i < tasks.length; i++) {
      var task = tasks[i];
      var name = task.getElementsByTagName("Name")[0].textContent;
      var start = task.getElementsByTagName("Start")[0].textContent;
      var end = task.getElementsByTagName("Finish")[0].textContent;
      data.push({ task: name, start: start, end: end });
    }
    updateChart(data);
    updateTaskList(data);
  }

  // Initialize the chart with the default data
  updateChart(data);
  updateTaskList(data);
</script>
}
