@page
@model AppwithAI1.Pages.d3_GANTT_ChartModel
@{
    ViewData["Title"] = "d3_GANTT_Chart";
}

<style>
    .task-row {
        display: flex;
        width: 100%;
        border-bottom: 1px solid white; /* Add a border at the bottom of each row */
        justify-content: flex-end; /* Align the row to the right of the container */
    }

        .task-row > div {
            display: flex;
            align-items: center; /* Center the contents of each cell vertically */
            margin-right: 10px; /* Add some margin between the cells */
        }

    /* Add the following rules */
    .dashboard-table {
        display: flex;
        flex-direction: row-reverse; /* Reverse the order of the items */
        justify-content: flex-start;
        align-items: flex-start;
    }
</style>


<style>
    .bar {
        fill: #d2fcff;
    }

    .tick text {
        fill: white;
    }

    #tooltip {
        position: absolute;
        left: 0;
        top: 550px;
        z-index: 999;
        background-color: #123;
        border: 1px solid #000;
        padding: 10px;
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
    }
</style>

<h1>GANTT Chart using d3.js</h1>

<div class="dashboard-table">
    <div id="task-list-container">
        <!-- Add tooltip element -->
        <div id="tooltip" class="hidden">
            <p><strong>Task:</strong> <span id="task"></span></p>
            <p><strong>Start:</strong> <span id="start"></span></p>
            <p><strong>End:</strong> <span id="end"></span></p>
        </div>

        <h2>Task List</h2>
        <div id="task-list" class="dashboard-table">
            <!-- Add rows for each task -->
            <div id="task-rows"></div>
        </div>
    </div>
    <div id="gantt-chart"></div>
</div>

@section Scripts {
<script src="https://d3js.org/d3.v5.min.js"></script>

<script>
    var data = [
        { task: "Task 1", start: "2020-01-01", end: "2020-01-05" },
        { task: "Task 2", start: "2020-01-06", end: "2020-01-10" },
        { task: "Task 3", start: "2020-01-11", end: "2020-01-15" },
        { task: "Task 4", start: "2020-01-16", end: "2020-01-20" },
        { task: "Task 5", start: "2020-01-21", end: "2020-01-25" },
        { task: "Task 6", start: "2020-01-26", end: "2020-01-30" },
        { task: "Task 7", start: "2020-02-01", end: "2020-02-05" },
        { task: "Task 8", start: "2020-02-06", end: "2020-02-10" },
        { task: "Task 9", start: "2020-02-11", end: "2020-02-15" },
        { task: "Task 10", start: "2020-02-16", end: "2020-02-20" },
        { task: "Task 11", start: "2020-02-21", end: "2020-02-25" },
        { task: "Task 12", start: "2020-02-26", end: "2020-03-01" },
        { task: "Task 13", start: "2020-03-02", end: "2020-03-06" },
        { task: "Task 14", start: "2020-03-07", end: "2020-03-11" },
        { task: "Task 15", start: "2020-03-12", end: "2020-03-16" },
        { task: "Task 16", start: "2020-03-17", end: "2020-03-21" },
        { task: "Task 17", start: "2020-03-22", end: "2020-03-26" },
        { task: "Task 18", start: "2020-03-27", end: "2020-03-31" },
        { task: "Task 19", start: "2020-04-01", end: "2020-04-05" },
        { task: "Task 20", start: "2020-04-06", end: "2020-04-10" }
    ];
    // Set the dimensions of the chart
    var width = 1000;
    var height = 500;
    var margin = { top: 20, right: 20, bottom: 20, left: 20 };
    // Define the scales for the x-axis (time scale) and y-axis (band scale)
    var xScale = d3.scaleTime()
        .domain([d3.min(data, d => d3.timeParse("%Y-%m-%d")(d.start)), d3.max(data, d => d3.timeParse("%Y-%m-%d")(d.end))])
        .range([0, width]);
    var yScale = d3.scaleBand()
        .domain(data.map(d => d.task))
        .range([0, height]);

    // Create the SVG element and append it to the #gantt-chart div
    var svg = d3.select("#gantt-chart")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    // Add the x-axis to the chart
    svg.append("g")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(xScale));
    // Add the y-axis to the chart
    svg.append("g")
        .call(d3.axisLeft(yScale));

    // Add the bars for each task
    svg.selectAll(".bar")
        .data(data)
        .enter().append("rect")
        .attr("class", "bar")
        .attr("x", function (d) { return xScale(d3.timeParse("%Y-%m-%d")(d.start)); })
        .attr("y", function (d) { return yScale(d.task); })
        .attr("width", function (d) { return xScale(d3.timeParse("%Y-%m-%d")(d.end)) - xScale(d3.timeParse("%Y-%m-%d")(d.start)); })
        .attr("height", yScale.bandwidth())
        // Add the tooltip event listeners
        .on("mouseover", function (d) {
            // Get the coordinates of the mouse
            var coordinates = [d3.event.pageX, d3.event.pageY];
            // Update the content of the tooltip
            d3.select("#task").text(d.task);
            d3.select("#start").text(d.start);
            d3.select("#end").text(d.end);
            // Show the tooltip
            d3.select("#tooltip")
                .style("left", (coordinates[0] + 10) + "px")
                .style("top", (coordinates[1] - 10) + "px")
                .transition()
                .duration(300)
                .style("opacity", 0.9);
        })
        .on("mouseout", function (d) {
            // Hide the tooltip
            d3.select("#tooltip")
                .transition()
                .duration(300)
                .style("opacity", 0);
        });

    // Add the rows for each task to the task list
    var taskRows = d3.select("#task-rows")
        .selectAll(".task-row")
        .data(data)
        .enter()
        .append("div")
        .attr("class", "task-row");

    taskRows.append("div")
        .text(function (d) { return d.task; });

    taskRows.append("div")
        .text(function (d) { return d.start + " - " + d.end; });
    </script>
}

