@page
@model AppwithAI1.Pages.d3_GANTT_Chart3Model
@{
    ViewData["Title"] = "d3_GANTT_Chart3";
}

<!-- Include the AnyChart library and the custom CSS file -->
    <script src="https://cdn.anychart.com/releases/v8/js/anychart-base.min.js"></script>
    <script src="https://cdn.anychart.com/releases/v8/js/anychart-ui.min.js"></script>
    <script src="https://cdn.anychart.com/releases/v8/js/anychart-exports.min.js"></script>
    <script src="https://cdn.anychart.com/releases/v8/js/anychart-gantt.min.js"></script>
    <script src="https://cdn.anychart.com/releases/v8/js/anychart-data-adapter.min.js"></script>

    <link href="style.css" type="text/css" rel="stylesheet">

<!-- Include the Materialize CSS library -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>

<style>
  /* Add the Materialize grid classes to the containers */
  #table-container {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: auto;
    /* Add the Materialize grid class */
    class="container"
  }

  #container {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: auto;
    /* Add the Materialize grid class */
    class="container"
  }

  #chart1-container {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: auto;
    /* Add the Materialize grid class */
    class="container"
  }

  #chart2-container {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: auto;
    /* Add the Materialize grid class */
    class="container"
  }
</style>


  <h1 class="dashboard-header">Project Dashboard</h1>
  <div class="dashboard-section">
    <div class="dashboard-stat">
      <span class="dashboard-stat-value">123</span>
      <span class="dashboard-stat-label">Total Project Participants</span>
    </div>
    <div class="dashboard-stat">
      <span class="dashboard-stat-value">45</span>
      <span class="dashboard-stat-label">Total Milestones</span>
    </div>
    <div class="dashboard-stat">
      <span class="dashboard-stat-value">789</span>
      <span class="dashboard-stat-label">Total Activities</span>
    </div>
  </div>
    <div class="dashboard-section">
    <div class="dashboard-stat">
      <span class="dashboard-stat-value">21</span>
      <span class="dashboard-stat-label">Currently Active Participants</span>
    </div>
    <div class="dashboard-stat">
      <span class="dashboard-stat-value">5</span>
      <span class="dashboard-stat-label">Total Milestones Acheived</span>
    </div>
    <div class="dashboard-stat">
      <span class="dashboard-stat-value">35</span>
      <span class="dashboard-stat-label">Total Activities Completed</span>
    </div>
  </div>

   <div class="dashboard-section">
    <canvas id="ManningChart" class="dashboard-chart"></canvas>
  </div>
  <div class="dashboard-section">
    <table class="dashboard-table">
      <tr>
        <th>Username</th>
        <th>Email</th>
        <th>Project Role</th>
      </tr>
      <tr>
        <td>user1</td>
        <td>user1@email.com</td>
        <td>Project Manager</td>
      </tr>
      <tr>
        <td>user2</td>
        <td>user2@email.com</td>
        <td>Mechanical Engineer</td>
      </tr>
      <tr>
        <td>user3</td>
        <td>user3@email.com</td>
        <td>Project Administrater</td>
      </tr>
      <tr>
        <td>user4</td>
        <td>user4@email.com</td>
        <td>Electrical Engineer</td>
      </tr>
      <tr>
        <td>user5</td>
        <td>user5@email.com</td>
        <td>Structural Lead</td>
      </tr>
    </table>
  </div>

<!-- Add form for uploading XML file -->
<form id="upload-form" method="post" enctype="multipart/form-data">
  <label for="upload-file" class="form-label">Choose a file to upload:</label>
  <input type="file" id="upload-file" name="upload-file" accept=".xml">
  <br>
  <button type="button" id="upload-button" value="Upload" class="form-button">Upload XML</button>
</form>


<br>
<div class="row">
  <div id="table-container" class="col s12 m6"></div>
</div>

<div class="row">
  <div id="container" class="col s12 m6"></div>
</div>

<div class="row">
  <div id="chart1-container" class="col s12 m6"></div>
</div>

<div class="row">
  <div id="chart2-container" class="col s12 m6"></div>
</div>


<script>
  // Add an event listener for the form submission event
  document.getElementById("upload-form").addEventListener("submit", function (event) {
    // Prevent the form from submitting
    event.preventDefault();

    //Testprint
    Console. Write('enetered function')

    // Get the file input element
    var fileInput = document.getElementById("upload-file");

    // Check if a file has been selected
    if (fileInput.files.length > 0) {
      // Get the selected file
      var file = fileInput.files[0];

      // Create a new FileReader to read the file
      var reader = new FileReader();

      // Set the event handler for the load event
      reader.onload = function (event) {
        // Get the contents of the file
        var contents = event.target.result;

        // Parse the XML contents
        var xml = d3.xml(contents, function (error, xml) {
          if (error) throw error;

          // Extract the data from the XML file and store it in a variable
          var data = [];

          // Loop through the tasks in the XML file and extract the data
          xml.querySelectorAll("Task").forEach(function (taskElement) {
            var task = {};
            task.task = taskElement.querySelector("Name").textContent;
            task.start = taskElement.querySelector("Start").textContent;
            task.end = taskElement.querySelector("Finish").textContent;
            data.push(task);
          });
          // test print
          Console. Write(data)

          // Update the chart with the new data
          updateChart(data);

          // Create a table to display the key elements of the uploaded file
          var table = document.createElement("table");
          var thead = document.createElement("thead");
          var tbody = document.createElement("tbody");
          var tr = document.createElement("tr");
          var th1 = document.createElement("th");
          var th2 = document.createElement("th");
          var th3 = document.createElement("th");
          th1.innerHTML = "Task";
          th2.innerHTML = "Start Date";
          th3.innerHTML = "End Date";
          tr.appendChild(th1);
          tr.appendChild(th2);
          tr.appendChild(th3);
          thead.appendChild(tr);
          table.appendChild(thead);

          // Add rows to the table for each task
          data.forEach(function (task) {
            var tr = document.createElement("tr");
            var td1 = document.createElement("td");
            var td2 = document.createElement("td");
            var td3 = document.createElement("td");
            td1.innerHTML = task.task;
            td2.innerHTML = task.start;
            td3.innerHTML = task.end;
            tr.appendChild(td1);
            tr.appendChild(td2);
            tr.appendChild(td3);
            tbody.appendChild(tr);
          });
          table.appendChild(tbody);

          // Get the container element for the table
          var container = document.getElementById("table-container");

          // Get the container element for the table
        var container = document.getElementById("table-container");

        // Append the table to the container
        container.appendChild(table);

        // Display a dialog box indicating that the file was uploaded successfully
        alert("File uploaded successfully!");
        });

        // Read the file
        reader.readAsText(file);
        } else {
        // Display a dialog box indicating that no file was selected
        alert("No file selected!");
        }
        });

        // Add a click event listener for the upload button
        document.getElementById("upload-button").addEventListener("click", function () {
        // Submit the form to trigger the file upload
        document.getElementById("upload-form").submit();
        });

        // Set the dimensions of the chart
        var margin = {top: 20, right: 20, bottom: 30, left: 40},
        width = 960 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

        // Set the ranges
        var x = d3.scale.ordinal().rangeRoundBands([0, width], .05);

        var y = d3.scale.linear().range([height, 0]);

        // Define the axes
        var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom");

        var yAxis = d3.svg.axis()
        .scale(y)
        .orient("left")
        .ticks(10);

        // Define the line
        var valueline = d3.svg.line()
        .x(function(d) { return x(d.date); })
        .y(function(d) { return y(d.close); });

        // Adds the svg canvas
        var svg = d3.select("body")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        // Get the data
        d3.csv("data.csv", function(error, data) {
        data.forEach(function(d) {
        d.date = d.date;
        d.close = +d.close;
        });

        // Scale the range of the data
        x.domain(data.map(function(d) { return d.date; }));
        y.domain([0, d3.max(data, function(d) { return d.close; })]);

        // Add the valueline path.
        svg.append("path")
        .attr("class", "line")
        .attr("d", valueline(data));

        // Add the X Axis
        svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

        // Add the Y Axis
        svg.append("g")
        .attr("class", "y axis")
        .call(yAxis);

        });

        function updateChart(data) {
          // Scale the range of the data
          x.domain(data.map(function(d) { return d.task; }));
          y.domain([0, d3.max(data, function(d) { return d.end; })]);

          // Add the bars
          svg.selectAll(".bar")
              .data(data)
            .enter().append("rect")
              .attr("class", "bar")
              .attr("x", function(d) { return x(d.task); })
              .attr("width", x.bandwidth())
              .attr("y", function(d) { return y(d.end); })
              .attr("height", function(d) { return height - y(d.end); });

          // Add the x-axis
          svg.append("g")
              .attr("transform", "translate(0," + height + ")")
              .call(d3.axisBottom(x));

          // Add the y-axis
          svg.append("g")
              .call(d3.axisLeft(y));
        });
    });
};

</script>


    <script>

        anychart.onDocumentReady(function () {
            // The data used in this sample can be obtained from the CDN
            // https://cdn.anychart.com/samples/gantt-charts/activity-oriented-chart/data.js
            anychart.data.loadJsonFile(
                'https://cdn.anychart.com/samples/gantt-charts/activity-oriented-chart/data.json',
                function (data) {
                    // create data tree
                    var treeData = anychart.data.tree(data, 'as-table');

                    // create project gantt chart
                    var chart = anychart.ganttProject();

                    // set data for the chart
                    chart.data(treeData);

                    // set start splitter position settings
                    chart.splitterPosition(370);

                    // get chart data grid link to set column settings
                    var dataGrid = chart.dataGrid();

                    // set first column settings
                    dataGrid
                        .column(0)
                        .title('#')
                        .width(30)
                        .labels({ hAlign: 'center' });

                    // set second column settings
                    dataGrid.column(1).labels().hAlign('left').width(180);

                    // set third column settings
                    dataGrid
                        .column(2)
                        .title('Start Time')
                        .width(70)
                        .labels()
                        .hAlign('right')
                        .format(function () {
                            var date = new Date(this.actualStart);
                            var month = date.getUTCMonth() + 1;
                            var strMonth = month > 9 ? month : '0' + month;
                            var utcDate = date.getUTCDate();
                            var strDate = utcDate > 9 ? utcDate : '0' + utcDate;
                            return date.getUTCFullYear() + '.' + strMonth + '.' + strDate;
                        });

                    // set fourth column settings
                    dataGrid
                        .column(3)
                        .title('End Time')
                        .width(80)
                        .labels()
                        .hAlign('right')
                        .format(function () {
                            var date = new Date(this.actualEnd);
                            var month = date.getUTCMonth() + 1;
                            var strMonth = month > 9 ? month : '0' + month;
                            var utcDate = date.getUTCDate();
                            var strDate = utcDate > 9 ? utcDate : '0' + utcDate;
                            return date.getUTCFullYear() + '.' + strMonth + '.' + strDate;
                        });

                    // set container id for the chart
                    chart.container('container');

                    // initiate chart drawing
                    chart.draw();

                    // zoom chart to specified date
                    chart.zoomTo(951350400000, 954201600000);
                }
            );
        });

    </script>

    <script>
        anychart.onDocumentReady(function () {
            anychart.data.loadJsonFile("https://gist.githubusercontent.com/shacheeswadia/21da3da501982400b8ca35690b17ea5a/raw/d17e3774c6db1502b5d95677a5656ecc43f24526/resourceChartData.json", function (data) {

                // create a data tree
                var treeData = anychart.data.tree(data, "as-tree");

                // create a resource chart
                var chart = anychart.ganttResource();

                // set the data
                chart.data(treeData);

                // fit the elements to the width of the timeline
                chart.fitAll();

                // set the position of the splitter to match the first column
                chart.dataGrid().fixedColumns(true);

                // set the container id
                chart.container("chart1-container");

                // draw the chart
                chart.draw();

            });
        });
    </script>
    <!-- create an instance of a pie chart -->
    <script>
        anychart.onDocumentLoad(function () {
            // create an instance of a pie chart
            var chart = anychart.pie();
            // set the data
            chart.data([
                ["Subsea Spread", 5],
                ["FPSO at Site", 2],
                ["Offshore Installation Camgaign", 2],
                ["Commisioning Activities", 2],
                ["Handover to operations", 1]
            ]);
            // set chart title
            chart.title("Top 5 Milestones by duration");
            // set the container element
            chart.container("chart2-container");
            // initiate chart display
            chart.draw();
        });
    </script>



